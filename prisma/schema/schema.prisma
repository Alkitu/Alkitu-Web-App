// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

model User {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?                @default("")
  lastName              String?                @default("")
  email                 String                 @unique
  emailVerified         DateTime?
  image                 String?                @default("")
  password              String?
  contactNumber         String?                @default("")
  terms                 Boolean                @default(true)
  role                  UserRole               @default(CLIENT)
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  accounts              Account[]
  holdedId              String?                @unique
  createdHoldedSyncAt   DateTime?
  lastHoldedSyncAt      DateTime?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  lastLogin             DateTime?              @default(now())
  // Offers             Offer[]
}

enum UserRole {
  ADMIN
  CLIENT
  EMPLOYEE
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// TODO: REVISAR
model TwoFactorConfirmation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// seperate for security reason
model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

// TODO: REVISAR 2FA
model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}
